#!/usr/bin/env node

/**
 * REPLÊºîÁ§∫
 * Â±ïÁ§∫REPLÂÆ¢Êà∑Á´ØÁöÑÂü∫Êú¨ÂäüËÉΩ
 */

import chalk from 'chalk';
import { ClientAPI } from '../src/client/client_api.js';

async function demonstrateREPL() {
    console.log(chalk.blue('üöÄ REPLÂäüËÉΩÊºîÁ§∫\n'));

    let client = null;

    try {
        // 1. ËøûÊé•Âà∞ÊúçÂä°Âô®
        console.log(chalk.yellow('1. ËøûÊé•Âà∞RPCÊúçÂä°Âô®...'));
        client = new ClientAPI({
            host: 'localhost',
            port: 8081
        });

        await client.connect();
        console.log(chalk.green('‚úÖ ËøûÊé•ÊàêÂäü\n'));

        // 2. ÊºîÁ§∫Êñá‰ª∂Êìç‰Ωú
        console.log(chalk.yellow('2. ÊºîÁ§∫Êñá‰ª∂Êìç‰Ωú...'));

        // ÂàõÂª∫Êñá‰ª∂
        console.log(chalk.gray('ÂàõÂª∫Êñá‰ª∂: test.txt'));
        const createResult = await client.createFile('test.txt', 'Hello from REPL demo!', 'local');
        console.log(chalk.green(`‚úÖ Êñá‰ª∂ÂàõÂª∫${createResult ? 'ÊàêÂäü' : 'Â§±Ë¥•'}`));

        // ËØªÂèñÊñá‰ª∂
        console.log(chalk.gray('ËØªÂèñÊñá‰ª∂: test.txt'));
        const content = await client.readFile('test.txt', 'local');
        console.log(chalk.green(`‚úÖ Êñá‰ª∂ÂÜÖÂÆπ: ${content}`));

        // Êõ¥Êñ∞Êñá‰ª∂
        console.log(chalk.gray('Êõ¥Êñ∞Êñá‰ª∂: test.txt'));
        const updateResult = await client.updateFile('test.txt', 'Updated content from REPL demo!', 'local');
        console.log(chalk.green(`‚úÖ Êñá‰ª∂Êõ¥Êñ∞${updateResult ? 'ÊàêÂäü' : 'Â§±Ë¥•'}`));

        // ÂÜçÊ¨°ËØªÂèñ
        const updatedContent = await client.readFile('test.txt', 'local');
        console.log(chalk.green(`‚úÖ Êõ¥Êñ∞ÂêéÂÜÖÂÆπ: ${updatedContent}`));

        // Ê£ÄÊü•Êñá‰ª∂Â≠òÂú®
        console.log(chalk.gray('Ê£ÄÊü•Êñá‰ª∂Â≠òÂú®: test.txt'));
        const exists = await client.fileExists('test.txt', 'local');
        console.log(chalk.green(`‚úÖ Êñá‰ª∂${exists ? 'Â≠òÂú®' : '‰∏çÂ≠òÂú®'}`));

        // Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØ
        console.log(chalk.gray('Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØ: test.txt'));
        const fileInfo = await client.getFileInfo('test.txt', 'local');
        if (fileInfo) {
            console.log(chalk.green(`‚úÖ Êñá‰ª∂‰ø°ÊÅØ:`));
            console.log(chalk.gray(`  Â§ßÂ∞è: ${fileInfo.size} Â≠óËäÇ`));
            console.log(chalk.gray(`  ÂàõÂª∫Êó∂Èó¥: ${fileInfo.created}`));
            console.log(chalk.gray(`  ‰øÆÊîπÊó∂Èó¥: ${fileInfo.modified}`));
        }

        // ÂàóÂá∫Êñá‰ª∂
        console.log(chalk.gray('ÂàóÂá∫Êñá‰ª∂'));
        const files = await client.listFiles('local');
        console.log(chalk.green(`‚úÖ Êñá‰ª∂ÂàóË°®:`));
        files.forEach(file => {
            console.log(chalk.gray(`  - ${file}`));
        });

        // Ëé∑ÂèñÊñá‰ª∂Á≥ªÁªüÁªüËÆ°
        console.log(chalk.gray('Ëé∑ÂèñÊñá‰ª∂Á≥ªÁªüÁªüËÆ°'));
        const stats = await client.getFSStats('local');
        console.log(chalk.green(`‚úÖ Êñá‰ª∂Á≥ªÁªüÁªüËÆ°:`));
        console.log(chalk.gray(`  Êñá‰ª∂Êï∞Èáè: ${stats.fileCount}`));
        console.log(chalk.gray(`  ÊÄªÂ§ßÂ∞è: ${stats.totalSize} Â≠óËäÇ`));
        console.log(chalk.gray(`  Âπ≥ÂùáÂ§ßÂ∞è: ${stats.averageSize.toFixed(2)} Â≠óËäÇ`));

        console.log(chalk.green('\n‚úÖ Êñá‰ª∂Êìç‰ΩúÊºîÁ§∫ÂÆåÊàê\n'));

        // 3. ÊºîÁ§∫ÂÜÖÂ≠òÊñá‰ª∂Á≥ªÁªü
        console.log(chalk.yellow('3. ÊºîÁ§∫ÂÜÖÂ≠òÊñá‰ª∂Á≥ªÁªü...'));

        const memoryCreate = await client.createFile('/memory-test.json', JSON.stringify({ message: 'Memory test from REPL' }), 'memory');
        console.log(chalk.green(`‚úÖ ÂÜÖÂ≠òÊñá‰ª∂ÂàõÂª∫${memoryCreate ? 'ÊàêÂäü' : 'Â§±Ë¥•'}`));

        const memoryRead = await client.readFile('/memory-test.json', 'memory');
        console.log(chalk.green(`‚úÖ ÂÜÖÂ≠òÊñá‰ª∂ÂÜÖÂÆπ: ${memoryRead}`));

        const memoryFiles = await client.listFiles('memory');
        console.log(chalk.green(`‚úÖ ÂÜÖÂ≠òÊñá‰ª∂ÂàóË°®:`));
        memoryFiles.forEach(file => {
            console.log(chalk.gray(`  - ${file}`));
        });

        console.log(chalk.green('\n‚úÖ ÂÜÖÂ≠òÊñá‰ª∂Á≥ªÁªüÊºîÁ§∫ÂÆåÊàê\n'));

        // 4. ÊºîÁ§∫Á≥ªÁªüÁä∂ÊÄÅ
        console.log(chalk.yellow('4. ÊºîÁ§∫Á≥ªÁªüÁä∂ÊÄÅ...'));

        const systemStatus = await client.getSystemStatus();
        console.log(chalk.green(`‚úÖ Á≥ªÁªüÁä∂ÊÄÅ:`));
        console.log(chalk.gray(`  ÂàùÂßãÂåñÁä∂ÊÄÅ: ${systemStatus.initialized ? '‚úÖ Â∑≤ÂàùÂßãÂåñ' : '‚ùå Êú™ÂàùÂßãÂåñ'}`));
        console.log(chalk.gray(`  Êñá‰ª∂ÊúçÂä°Êï∞Èáè: ${systemStatus.fsServices.length}`));
        console.log(chalk.gray(`  Ê†∏ÂøÉÁªÑ‰ª∂Êï∞Èáè: ${systemStatus.components.length}`));

        const fsList = await client.getFSList();
        console.log(chalk.green(`‚úÖ ÂèØÁî®Êñá‰ª∂Á≥ªÁªü:`));
        fsList.forEach(fs => {
            console.log(chalk.gray(`  - ${fs.name} (${fs.type})`));
        });

        const components = await client.getComponents();
        console.log(chalk.green(`‚úÖ ÂèØÁî®ÁªÑ‰ª∂:`));
        components.forEach(component => {
            console.log(chalk.gray(`  - ${component}`));
        });

        console.log(chalk.green('\n‚úÖ Á≥ªÁªüÁä∂ÊÄÅÊºîÁ§∫ÂÆåÊàê\n'));

        // 5. Ê∏ÖÁêÜÊºîÁ§∫Êñá‰ª∂
        console.log(chalk.yellow('5. Ê∏ÖÁêÜÊºîÁ§∫Êñá‰ª∂...'));

        const deleteResult = await client.deleteFile('test.txt', 'local');
        console.log(chalk.green(`‚úÖ Êñá‰ª∂Âà†Èô§${deleteResult ? 'ÊàêÂäü' : 'Â§±Ë¥•'}: test.txt`));

        const memoryDeleteResult = await client.deleteFile('/memory-test.json', 'memory');
        console.log(chalk.green(`‚úÖ ÂÜÖÂ≠òÊñá‰ª∂Âà†Èô§${memoryDeleteResult ? 'ÊàêÂäü' : 'Â§±Ë¥•'}: /memory-test.json`));

        console.log(chalk.green('\n‚úÖ REPLÂäüËÉΩÊºîÁ§∫ÂÆåÊàê!'));

    } catch (error) {
        console.error(chalk.red('‚ùå ÊºîÁ§∫ËøáÁ®ã‰∏≠Âá∫Áé∞ÈîôËØØ:'), error);
    } finally {
        // Ê∏ÖÁêÜËµÑÊ∫ê
        if (client) {
            client.disconnect();
            console.log(chalk.gray('\nüîå ÂÆ¢Êà∑Á´ØÊñ≠ÂºÄËøûÊé•'));
        }
    }
}

// ËøêË°åÊºîÁ§∫
if (import.meta.url === `file://${process.argv[1]}`) {
    demonstrateREPL().catch((error) => {
        console.error(chalk.red('‚ùå ÊºîÁ§∫Â§±Ë¥•:'), error);
        process.exit(1);
    });
}

export default demonstrateREPL;
